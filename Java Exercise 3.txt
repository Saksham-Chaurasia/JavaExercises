Java Exercise 3

1.//count Elements greater than x
class Solution
{
    // arr[]: input array
    // n: size of the array
    // x: element for which you need to return the count
    public static int greaterThanX(int arr[], int n, int x)
    {
        
        int cnt = 0;
        for(int i:arr){
            if(i>x){
                cnt++;
            }
        }
        return cnt;
    }
}

2. //find immediate smaller than x

class Solution
{
    
    public static int immediateSmaller(int arr[], int n, int x)
    {
        
        int value = arr[0];
        int result =Integer.MIN_VALUE;
        for(int i =0; i<n; i++){
            if(arr[i]<x){
                value = arr[i];
                result = Math.max(result,value);
            }
        }
        if(value!=x)
        return result;
        else
        return -1;
    }
}

3. // find immediate greater than x
class Solution
{
    // Complete the function
    public static int immediateGreater(int arr[], int n, int x)
    {
        
        int value = arr[i];
        int result = Integer.MAX_VALUE;
        for(int i =0; i<n; i++){
            if(arr[i]>x){
                value = arr[i];
                result = Math.min(value,result);
            }
            
            if(value!=x)
            return result;
            
            else
            return -1;
            
        }
    }
}

4. // find majority element
class Solution {
    // Function to find element with more appearances between two elements in an
    // array.
    public int majorityWins(int arr[], int n, int x, int y) {
        
        int cnx =0; 
        int cny = 0; 
        for(int i =0; i<n ; i++){
            if(arr[i]==x)
            cnx++;
            if(arr[i]==y)
            cny++;
        }
          if(cnx==cny){
            if(x<y)
            return x; 
            else
            return y;
        }
        if(cnx>cny){
            return x;
        }
        else if(cnx<cny){
            return y;
        }
        else
        return -1;
       
        
    }
}

5. //reverse the array
class Get {
    public static void reverseArray(int arr[], int n) {
        
        for(int i =0; i<n/2; i++){
            int temp = arr[i];
            arr[i] = arr[n-1-i];
            arr[n-1-i] = temp;
        }
    }
}

6. // rotate the array
class Solution
{
    //Function to rotate an array by d elements in counter-clockwise direction.
    public static void rotation(int arr[], int low , int high){
       
        
        while(low<high){
            int temp = arr[low];
            arr[low] = arr[high];
            arr[high] = temp;
            
            high--;
            low++;
        }
        
    }
    
    static void rotateArr(int arr[], int d, int n)
    {
        
        if(d==0)
        return; 
        d = d%n;
        rotation(arr,0,d-1);
        rotation(arr,d,n-1);
        rotation(arr,0,n-1);
        
    }
}

7. // sum of array elements

class Get
{
    public static int sumElement(int arr[], int n)
    {
        
        int sum =0;
        for(int i : arr){
            sum +=i;
        }
        return sum;
        
    }
}

8. // mean and median of the array

class Solution
{
  //Function to find median of the array elements.  
  public int median(int A[],int N)
    {
      
       Arrays.sort(A);
       
       
       //If median is fraction then conver it to integer and return
       if(N%2==0){
           return (A[N/2] + A[(N/2) -1])/2;
           
       }
       else
       return A[N/2];
       
    }
    //Function to find median of the array elements.
    public int mean(int A[],int N)
    {
       
       int sum =0;
       for(int i =0; i<N; i++){
           sum +=A[i];
       }
       return sum/N;
    }

}

9. // array is sorted increasing or decreasing checking with the corner cases 

class Solution
{
    //Complete the function
    public static int isSorted(int arr[], int n)
    {
       
       boolean a = false;
       boolean b = false;
       for(int i =0; i<n-1; i++){
           if(arr[i]<arr[i+1]){
               a = true;
               
           }
           
           if(arr[i]>arr[i+1]){
               b = true;
           }
           
          
       }
       
       if(n==1)
       return 1;
       
       if(a==b){
           return 0;
       }
       else{
           return 1; 
       }
       
       
       
    }
}

